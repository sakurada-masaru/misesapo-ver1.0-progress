name: Cloud Run deploy (build → image)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}
      CLOUD_RUN_REGION: ${{ vars.CLOUD_RUN_REGION }}
      WIF_PROVIDER: ${{ vars.WIF_PROVIDER }}
      WIF_SERVICE_ACCOUNT: ${{ vars.WIF_SERVICE_ACCOUNT }}
      AR_REPO: cloud-run-source-deploy
    outputs:
      run_url: ${{ steps.resolve.outputs.run_url }}
      build_id: ${{ steps.build_image.outputs.build_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Auth with WIF
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Build static files
        shell: bash
        run: |
          set -euo pipefail
          python3 -V
          python3 scripts/build.py

      - name: Build & push image (async; robust ID parse v2)
        id: build_image
        shell: bash
        run: |
          set -euo pipefail

          IMAGE="asia-northeast1-docker.pkg.dev/${GCP_PROJECT_ID}/${AR_REPO}/${CLOUD_RUN_SERVICE}:$(git rev-parse --short HEAD)"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"

          OUTFILE="$(mktemp)"
          set +e
          gcloud builds submit . \
            --gcs-source-staging-dir="gs://run-sources-${GCP_PROJECT_ID}-${CLOUD_RUN_REGION}/source" \
            --tag "${IMAGE}" \
            --async | tee "$OUTFILE"
          set -e

          # ① URL形式から抽出（Created [ .../builds/<ID> ]）
          BUILD_ID="$(sed -n 's#.*builds/\([A-Za-z0-9-]\+\).*#\1#p' "$OUTFILE" | tail -n1)"

          # ② 表形式（ID CREATE_TIME ... QUEUED）の1列目から抽出（今回のケース）
          if [[ -z "${BUILD_ID:-}" ]]; then
            BUILD_ID="$(awk '/^[0-9a-f-]{36}[[:space:]]/ {print $1; exit}' "$OUTFILE")"
          fi

          if [[ -z "${BUILD_ID:-}" ]]; then
            echo "ERROR: Failed to extract Cloud Build ID from submit output:"
            cat "$OUTFILE"
            exit 1
          fi

          echo "Build ID: $BUILD_ID"

          # 状態をポーリング
          ATTEMPTS=120
          SLEEP_SEC=5
          for ((i=1; i<=ATTEMPTS; i++)); do
            STATUS="$(gcloud builds describe "$BUILD_ID" --format='value(status)')"
            echo "Build status: $STATUS"
            case "$STATUS" in
              SUCCESS) break ;;
              FAILURE|CANCELLED|EXPIRED) echo "Build ended with $STATUS"; exit 1 ;;
              *) sleep "$SLEEP_SEC" ;;
            esac
          done

          FINAL_STATUS="$(gcloud builds describe "$BUILD_ID" --format='value(status)')"
          if [[ "$FINAL_STATUS" != "SUCCESS" ]]; then
            echo "Build did not reach SUCCESS (last: $FINAL_STATUS)"; exit 1
          fi

          # Export build id as step output
          echo "build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"

      - name: Deploy to Cloud Run (image)
        shell: bash
        run: |
          set -euo pipefail
          gcloud run deploy "$CLOUD_RUN_SERVICE" \
            --region "$CLOUD_RUN_REGION" \
            --image "$IMAGE" \
            --allow-unauthenticated

      - name: Resolve Service URL
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          URL="$(gcloud run services describe "$CLOUD_RUN_SERVICE" \
            --region "$CLOUD_RUN_REGION" \
            --format='value(status.url)')"
          [[ -n "$URL" ]] || { echo "Failed to resolve URL"; exit 1; }
          echo "run_url=$URL" >> "$GITHUB_OUTPUT"

  smoke:
    needs: deploy
    uses: ./.github/workflows/smoke-test.yml
    with:
      run_url: ${{ needs.deploy.outputs.run_url }}

  notify:
    needs: [deploy, smoke]
    if: ${{ always() }}
    uses: ./.github/workflows/notify.yml
    with:
      run_url: ${{ needs.deploy.outputs.run_url }}
      build_id: ${{ needs.deploy.outputs.build_id }}
      deploy_result: ${{ needs.deploy.result }}
      smoke_result: ${{ needs.smoke.result }}
    secrets: inherit
